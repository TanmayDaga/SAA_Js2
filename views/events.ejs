<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
    <link rel="stylesheet" href="/stylesheets/events.css" />
  

    <style>
      @keyframes bring-down {
        0% {
          transform: translateY(-100%);
        }
        100% {
          transform: translateY(0);
        }
      }
      @keyframes bring-up {
        0% {
          transform: translateY(0);
        }
        100% {
          transform: translateY(-100%);
        }
      }

      .bring-down {
        animation: bring-down 0.3s ease-in forwards;
      }
      .bring-up {
        animation: bring-up 0.3s ease-in forwards;
      }
    </style>
  </head>
  <body class="h-screen">
    <%- include('./common/imageLoaderScript') %>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/flowbite/2.3.0/flowbite.min.js"></script>
    <script src="/taos.js"></script>
    <%- include('./common/nav')%>

    <!-- Render event types -->

    <div
      class="w-full lg:h-3/6 md:h-3/5 max-md:h-2/5 border-2 border-red-400 relative"
    > <img src="/media/gallery/g7.jpg" class="object-stretch w-full h-full "/> 
    
    <div class="w-full max-w-md absolute left-0 right-0 ml-auto mr-auto bottom-10">
      <form class="relative">
        <input
          type="text"
          placeholder="Search..."
          class="w-full px-4 py-2 text-gray-700 bg-white border-non rounded-lg shadow-sm focus:outline-none focus:border-red-500 focus:ring-2 focus:ring-red-500 opacity-60 backdrop-blur-md focus:opacity-100"
        />
        <button type="submit" class="absolute right-2 top-2 text-red-500 hover:text-red-700 focus:outline-none">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-4.35-4.35m1.73-5.57a7.5 7.5 0 11-15 0 7.5 7.5 0 0115 0z"></path>
          </svg>
        </button>
      </form>
    </div>
  </div>

    <div class="relative w-screen overflow-hidden min-h-screen">
      <div
        class="justify-center bg-white flex lg:flex-row max-lg:flex-row items-stretch lg:gap-32 md:gap-16 max-md:gap-4 mx-auto max-w-screen-2xl text-center px-32 py-16"
      >
        <%- include('./events/eventTypes', {EventTypes}) %>
        <!-- Event container for dynamic event cards -->
        <div class="w-1/2 h-full items-start justify-center">
          <h2 id="containerHeading" class="text-3xl font-medium py-5">
            Conference Heading
          </h2>
          <div
            id="eventCardsContainer"
            class="w-1/2 h-full flex flex-col items-start justify-center card-container"
          >
            <!-- Event Cards will be dynamically added here -->
          </div>
        </div>
      </div>
    </div>

    <script>
      // Get reference to event cards container
      const eventCardsContainer = document.getElementById(
        "eventCardsContainer"
      );

      // Get reference to event type list items
      const eventTypeItems = document.querySelectorAll(".eventType");

      function getCard(event) {
        return `<div class="card relative flex flex-col md:flex-row rounded-xl shadow-lg  min-w-[575.5px] mx-auto border hover:border-red-400  bg-transparent backdrop-blur-sm transition-colors duration-300 ease mb-5 hover:shadow-lg  ">
            <div class="w-full bg-transparent backdrop-blur-sm flex flex-col space-y-4 rounded-xl">
              <div class="flex justify-between gap-8 items-center relative px-6 pt-3">
                <h3 class="font-black text-gray-700 md:text-3xl text-xl pb-4">${
                  event.name
                }</h3>
                <div class="flex flex-col text-gray-700 text-sm space-y-1">
                  <div class="flex items-end">
                    <i class="fas fa-clock text-gray-700 mr-2"></i>
                    <span>${event.startTime} - ${event.endTime}</span>
                  </div>
                  <div class="flex items-center">
                    <i class="fas fa-calendar-alt text-gray-700 mr-2"></i>
                    <span>${event.startDate} - ${event.endDate}</span>
                  </div>
                  <div class="flex items-center">
                    <i class="fas fa-map-marker-alt text-gray-700 mr-2"></i>
                    <span>${event.venue}</span>
                  </div>

                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" class="btn-view-more h-6 w-8 text-gray-800  transition duration-300 ease-in-out  rounded-sm
                  text-black absolute right-0 bottom-0 transition transition-all
                  mr-3" onclick="toggleDescription(event, 'desc-${
                    event.id
                  }')"    >
	<path d="M233.4 406.6c12.5 12.5 32.8 12.5 45.3 0l192-192c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L256 338.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l192 192z"/></svg>

                </div>
              </div>
              <div class="relative w-full bg-gray-100 flex flex-row h-40 overflow-hidden p-4 box-border gap-4 rounded-b-xl">
                ${event.mediaFiles
                  .map((ele) => {
                    return `<img src="${ele}" alt="event.title" class="rounded-xl w-32 h-full" />`;
                  })
                  .join("")}

                   <div id="desc-${
                     event.id
                   }" class="absolute inset-0 bg-black bg-opacity-75 text-white p-4 overflow-hidden -translate-y-full toggle-hidden" >${
          event.description
        }</div>
              </div>
            
             
            </div>
          </div>`;
      }

      // Function to toggle the visibility of the description
      function toggleDescription(event, descId) {
        const descriptionDiv = document.getElementById(descId);
        if (descriptionDiv.classList.contains("toggle-hidden")) {
          descriptionDiv.classList.remove("toggle-hidden");
          descriptionDiv.classList.remove("bring-up");
          descriptionDiv.classList.add("bring-down");

          event.target.innerHTML = `<path d="M233.4 105.4c12.5-12.5 32.8-12.5 45.3 0l192 192c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L256 173.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l192-192z"/>`;
        } else {
          event.target.innerHTML = `	<path d="M233.4 406.6c12.5 12.5 32.8 12.5 45.3 0l192-192c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L256 338.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l192 192z"/>`;
          descriptionDiv.classList.remove("bring-down");
          descriptionDiv.classList.add("bring-up");
          descriptionDiv.classList.add("toggle-hidden");
        }
      }
      const containerHeader = document.getElementById("containerHeading");
      // Add click event listener to each event type list item
      eventTypeItems.forEach((item) => {
        item.addEventListener("click", async () => {
          const eventType = item.dataset.type;
          containerHeader.innerHTML = item.dataset.type;

          // TODO: Make it in rest Api format
          const filteredEventsData = JSON.parse(
            `<%-unescape(JSON.stringify(Events))%>`
          );

          const filteredEvents = filteredEventsData[eventType];

          // Render event cards for the selected event type
          eventCardsContainer.innerHTML = "";
          filteredEvents.forEach((event) => {
            // Create event card HTML
            const eventCardHTML = getCard(event);

            // Append event card HTML to the event cards container
            eventCardsContainer.insertAdjacentHTML("beforeend", eventCardHTML);
          });

          // Show event cards container
          eventCardsContainer.classList.remove("hidden");
        });
      });
    </script>

    <div class="absolute top-0 left-0 w-1/2 bg-green-300"></div>

    <%- include('./common/footer')%>
  </body>
</html>
